---
layout: post
title:  "docker"
date:   2016-03-10 13:00:00 +0900
categories: sample
---

# install

reffer to:  
[curl -fsSL https://get.docker.com/gpg | sudo apt-key add -](https://docs.docker.com/linux/step_one/)  

$ curl -fsSL https://get.docker.com/ | sh  
$ sudo usermod -aG docker user  
$ sudo service docker restart  

logout once and login again not to need to use sudo  

$ curl -fsSL https://get.docker.com/gpg | sudo apt-key add -  

$ docker -v  

{% highlight text %}
Docker version 1.11.0, build 4dc5990
{% endhighlight %}

check docker  
$ docker run hello-world

go into inside on bash  
$ docker run -it ubuntu bash  

# commands

run ubuntu container and run a command.  
if ubuntu isn't downloaded, it starts downloading it.  
$ docker run ubuntu cat /etc/lsb-release  

$ docker search nginx

-d -> deamon  
-P -> connect port between the host and the container  
--name -> container name  
-e -> set env  
-v -> bind directory  
$ docker run -d -P --name=server -e myenv=foo -v ~/:/usr/share/local/nginx/html nginx  

bind ports  
-p 60000-60030:60000-60030 -p 8080:80  

--link (id):(alias)  
you can set alias by yourself  
$ docker run --link (id):(alias) ubuntu  

$ docker run --link server:ngx ubuntu env | grep -i _port

{% highlight text %}
NGX_PORT=tcp://172.17.0.2:80
NGX_PORT_80_TCP=tcp://172.17.0.2:80
NGX_PORT_80_TCP_ADDR=172.17.0.2
NGX_PORT_80_TCP_PORT=80
NGX_PORT_80_TCP_PROTO=tcp
NGX_PORT_443_TCP=tcp://172.17.0.2:443
NGX_PORT_443_TCP_ADDR=172.17.0.2
NGX_PORT_443_TCP_PORT=443
NGX_PORT_443_TCP_PROTO=tcp
{% endhighlight %}

--rm automatically remove the container if it exists  
$ docker run --rm --link server:ngx ubuntu cat /etc/hosts  

stop docker  
$ docker stop (id)  

show all containers (includes stopped one)  
$ docker ps -a  

remove stopped container  
$ docker rm (id)  

start a stopped container  
$ docker start (id)  

run one command  
$ docker exec (id) md5sum /etc/nginx/nginx.conf  

implement bash  
$ docker exec -i -t (id) /bin/bash

show docker logs  
$ docker logs (id)

show container details  
$ docker inspect (id)

$ docker images

remove an docker image  
$ docker rmi (image)

show image detail
$ docker inspect (image)

delete all docker containers  
$ docker rm $(docker ps -aq)  

delete all docker images
$ docker rmi $(docker images -q)

# prepare Dockerfile and run

$ vim Dockerfile

{% highlight text %}
FROM centos:7
MAINTAINER sample taro <taro@sample.co.jp>
RUN yum -y install epel-release
RUN yum -y install httpd
EXPOSE 80 443
CMD ["/usr/sbin/httpd", "-DFOREGROUND"]
{% endhighlight %}

$ docker build -t example1 .

# push to hub.docker

create account on https://hub.docker.com/  
$ docker tag docker-whale shojik/docker-whale:latest  
$ docker login --username=shojik --email=sample@sample.com  

save token to ~/.docker/config.json  

$ docker push shojik/docker-whale  

## refferences

- [Dockerのライフサイクルを理解するハンズオン資料 - Qiita](http://qiita.com/zembutsu/items/d146295cfcf69c205c1e)
